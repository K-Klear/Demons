local view = vmath.matrix4()
local projection = vmath.matrix4()
local window_width, window_height = window.get_size()
local GRID_SIZE = 64
local tilemap_width, tilemap_height, tilemap_low_x, tilemap_low_y

local function window_callback(self, event, data)
	if event == window.WINDOW_EVENT_FOCUS_LOST then
		
	elseif event == window.WINDOW_EVENT_FOCUS_GAINED then
		
	elseif event == window.WINDOW_EVENT_ICONFIED then
		
	elseif event == window.WINDOW_EVENT_DEICONIFIED then
		
	elseif event == window.WINDOW_EVENT_RESIZED then
		projection = vmath.matrix4_perspective(math.pi / 8, data.width / data.height, 0.1, 2024)
	end
end


function update(self, dt)
	msg.post("@render:", hash("set_view_projection_custom"), {view = view, projection = projection})
end

function on_message(self, message_id, message, sender)
	
end

local nv = vmath.vector4(0, 0, -1, 1)
local fv = vmath.vector4(0, 0, 1, 1)

local function screen_to_world_ray(x, y)
	local m = vmath.inv(projection * view)

	-- Remap coordinates to range -1 to 1
	local x1 = (x - window_width * 0.5) / window_width * 2
	local y1 = (y - window_height * 0.5) / window_height * 2

	nv.x, nv.y = x1, y1
	fv.x, fv.y = x1, y1
	local np = m * nv
	local fp = m * fv
	np = np * (1 / np.w)
	fp = fp * (1 / fp.w)

	return vmath.vector3(np.x, np.y, np.z), vmath.vector3(fp.x, fp.y, fp.z)
end

local function screen_to_world_plane(x, y, planeNormal, pointOnPlane)
	local np, fp = screen_to_world_ray(x, y)
	local denom = vmath.dot(planeNormal, fp - np)
	if denom == 0 then
		-- ray is perpendicular to plane normal, so there are either 0 or infinite intersections
		return
	end
	local numer = vmath.dot(planeNormal, pointOnPlane - np)
	return vmath.lerp(numer / denom, np, fp)
end

local function pos_to_grid(pos)
	return math.ceil(pos.x / GRID_SIZE), math.ceil(pos.y / GRID_SIZE)
end

local function grid_to_pos(x, y)
	return vmath.vector3(x * GRID_SIZE - (GRID_SIZE / 2), y * GRID_SIZE - (GRID_SIZE / 2), 0)
end

local function set_view(eye, look_at)
	local up = vmath.vector3(0, 0, 1)
	view = vmath.matrix4_look_at(eye, look_at, up)
end

local function set_proj(fov)
	projection = vmath.matrix4_perspective(fov, window_width / window_height, 0.1, 2024)
end

function init(self)
	msg.post("@render:", hash("use_camera_projection"))
	msg.post(".", hash("acquire_input_focus"))
	set_view(vmath.vector3(-500, -500, 500), vmath.vector3(0))
	set_proj(math.pi / 6)
	window.set_listener(window_callback)
	tilemap_low_x, tilemap_low_y, tilemap_width, tilemap_height = tilemap.get_bounds("#ground")
end

function on_input(self, action_id, action)
	if not action_id then
		local pos = screen_to_world_plane(action.x, action.y, vmath.vector3(0, 0, 1), vmath.vector3(0))
		local x, y = pos_to_grid(pos)
		if x >= tilemap_low_x and x < tilemap_low_x + tilemap_width and y >= tilemap_low_y and y < tilemap_low_y + tilemap_height then
			msg.post("selector", hash("enable"))
			go.set_position(grid_to_pos(x, y), "selector")
		else
			msg.post("selector", hash("disable"))
		end
	end
	if action_id == hash("touch") and action.pressed then
		--[[
		local pos = screen_to_world_plane(action.x, action.y, vmath.vector3(0, 0, 1), vmath.vector3(0))
		local new_pos = grid_to_pos(pos_to_grid(pos))
		local old_pos = go.get_world_position("knight")
		go.animate("knight", "position", go.PLAYBACK_ONCE_FORWARD, new_pos, go.EASING_INOUTSINE, 1)

		local angle = math.atan2(new_pos.y - old_pos.y, new_pos.x - old_pos.x) + math.pi / 2
		go.set("knight", "euler.z", math.deg(angle))
		--]]
	end
end